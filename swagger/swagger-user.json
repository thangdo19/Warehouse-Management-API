{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "My User Project CRUD",
        "description": "My User Project Application API",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "host": "cnpmwarehouse.herokuapp.com",
    "paths": {
        "/users": {
            "get": {
                "tags": ["Users"],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "Bearer sYFuat5lz1y5v0LrCt7LfqJpo1AkdLgm7LbY6eRibN4NYw9Srf6aMIRJM8KbTwM6"
                        }
                    }, {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "string"

                        }

                    }, {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "string"

                        }

                    }
                ],
                "summary": "Get all users in system",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Users"
                        }
                    }

                }
            },
            "post": {
                "tags": ["Users"],
                "summary": "Create new user in system",
                "description": "Create new user in system",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "User that we want to create",
                        "schema": {
                            "$ref": "#/definitions/AddUser"
                        }
                    }
                ],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "New user is created",
                        "schema": {
                            "$ref": "#/definitions/AddUser"
                        }
                    },
                    "400": {
                        "description": "Cannot create user",
                        "schema": {
                            "$ref": "#/definitions/error400"
                        }
                    }
                }
            }

        },
        "/users/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "ID of user that we want to find",
                    "type": "integer"
                }, {
                    "in": "header",
                    "name": "Authorization",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "example": "Bearer sYFuat5lz1y5v0LrCt7LfqJpo1AkdLgm7LbY6eRibN4NYw9Srf6aMIRJM8KbTwM6"
                    }
                }
            ],
            "get": {
                "tags": ["Users"],
                "summary": "Get users with given in system",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "Bearer sYFuat5lz1y5v0LrCt7LfqJpo1AkdLgm7LbY6eRibN4NYw9Srf6aMIRJM8KbTwM6"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }

                }
            },
            "delete": {
                "summary": "Delete user with given ID",
                "tags": ["Users"],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "Bearer sYFuat5lz1y5v0LrCt7LfqJpo1AkdLgm7LbY6eRibN4NYw9Srf6aMIRJM8KbTwM6"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User is deleted"

                    },
                    "404": {
                        "description": "User {:id} cannot be found",
                        "schema": {
                            "$ref": "#/definitions/error400"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update user with give ID, before call update, call api get user by id to display all",
                "tags": ["Users"],
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "Bearer sYFuat5lz1y5v0LrCt7LfqJpo1AkdLgm7LbY6eRibN4NYw9Srf6aMIRJM8KbTwM6"
                        }
                    }, {
                        "name": "user",
                        "in": "body",
                        "description": "User with new values of properties",
                        "schema": {
                            "$ref": "#/definitions/UpdateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User is updated",
                        "schema": {
                            "$ref": "#/definitions/UpdateUser"
                        }
                    },
                    "404": {
                        "description": "User {:id} cannot be found",
                        "schema": {
                            "$ref": "#/definitions/error400"
                        }
                    }
                }
            }

        },
        "/permissions": {
            "get": {
                "tags": ["Users"],
                "summary": "Get all users permissions in system",
                "parameters": [
                    {
                        "in": "header",
                        "name": "Authorization",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "Bearer sYFuat5lz1y5v0LrCt7LfqJpo1AkdLgm7LbY6eRibN4NYw9Srf6aMIRJM8KbTwM6"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    }

                }
            }
        }

    },
    "definitions": {
        "User": {
            "required": [
                "name", "id", "email", "phone"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },

                "phone": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                }

            }
        },
        "Users": {
            "type": "array",
            "$ref": "#/definitions/User"
        },
        "UpdateUser": {
            "required": [
                "name", "id", "email", "phone", "password"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                }
            }
        },
        "Permission": {
            "required": [
                "id", "permissionName"
            ],
            "properties": {
                "$ref": "#/definitions/User",
                "id": {
                    "type": "string"
                },
                "permissionName": {
                    "type": "string"
                }
            }
        },
        "AddUser": {
            "required": [
                "name", "phone", "email", "password"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "example": "0123456789"
                },
                "email": {
                    "type": "string",
                    "example": "string@gmail.com"
                },
                "password": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                }

            }
        },
        "error400": {
            "properties": {
                "statusCode": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }

            }
        }
    },
    "schemes": ["https"],
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    }

}